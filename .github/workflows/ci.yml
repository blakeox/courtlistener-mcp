name: Continuous Integration

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  issues: write

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: |
          if ! pnpm install --frozen-lockfile --dry-run > /dev/null 2>&1; then
            echo "pnpm lock file out of sync, regenerating..."
            pnpm install
          else
            pnpm install --frozen-lockfile
          fi

      - name: Version consistency check
        run: pnpm run ci:version-check

      - name: Lint (critical files)
        run: pnpm run lint:critical

      - name: Lint (full src - non-blocking)
        run: pnpm run lint:src
        continue-on-error: true

      - name: TypeScript compilation check
        run: pnpm run typecheck

      - name: Build project
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test:unit

      - name: Run integration tests
        run: pnpm run test:integration

      - name: Enforce coverage thresholds
        run: pnpm run coverage:check

      - name: Run coverage (generate reports)
        if: always()
        run: pnpm run coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-node-${{ matrix.node-version }}
          path: |
            coverage/
            coverage/lcov.info
          retention-days: 7

      - name: Append coverage summary
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            BRANCH=$(jq '.total.branches.pct' coverage/coverage-summary.json || echo 0)
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json || echo 0)
            FUNCS=$(jq '.total.functions.pct' coverage/coverage-summary.json || echo 0)
            STMTS=$(jq '.total.statements.pct' coverage/coverage-summary.json || echo 0)
            echo "## Coverage Summary (Node ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
            echo "- Lines: ${LINES}%" >> $GITHUB_STEP_SUMMARY
            echo "- Statements: ${STMTS}%" >> $GITHUB_STEP_SUMMARY
            echo "- Functions: ${FUNCS}%" >> $GITHUB_STEP_SUMMARY
            echo "- Branches: ${BRANCH}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage summary JSON found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run performance tests
        run: pnpm run test:performance

      - name: Install MCP Inspector
        run: pnpm add -g @modelcontextprotocol/inspector

      - name: Run MCP protocol validation
        run: pnpm run test:mcp

  mcp-compliance:
    name: MCP Protocol Compliance
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: |
          if ! pnpm install --frozen-lockfile --dry-run > /dev/null 2>&1; then
            pnpm install
          else
            pnpm install --frozen-lockfile
          fi

      - name: Build project
        run: pnpm run build

      - name: Install MCP Inspector
        run: pnpm add -g @modelcontextprotocol/inspector

      - name: Comprehensive MCP validation
        env:
          REMOTE_SERVER_URL: ${{ secrets.REMOTE_SERVER_URL }}
        run: |
          echo "Running comprehensive MCP protocol validation..."
          pnpm run test:mcp
          if [ -n "$REMOTE_SERVER_URL" ]; then
            REMOTE_SSE_URL="$REMOTE_SERVER_URL"
            if [[ "$REMOTE_SSE_URL" == "/health" || "$REMOTE_SSE_URL" == *"/health" ]]; then
              REMOTE_SSE_URL="${REMOTE_SSE_URL%/health}/sse"
            elif [[ "$REMOTE_SSE_URL" != *"/sse" ]]; then
              REMOTE_SSE_URL="${REMOTE_SSE_URL}/sse"
            fi
            SERVER_URL="$REMOTE_SSE_URL" pnpm run test:mcp
          fi

      - name: Generate MCP compliance report
        run: |
          echo "# MCP Protocol Compliance Report" > mcp-compliance-report.md
          echo "" >> mcp-compliance-report.md
          echo "Generated on: $(date)" >> mcp-compliance-report.md
          echo "" >> mcp-compliance-report.md
          echo "## Test Results" >> mcp-compliance-report.md
          if [ -f test-output/mcp-validation.log ]; then
            echo "\`\`\`" >> mcp-compliance-report.md
            cat test-output/mcp-validation.log >> mcp-compliance-report.md
            echo "\`\`\`" >> mcp-compliance-report.md
          fi

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: mcp-compliance-report
          path: mcp-compliance-report.md

  remote-server-test:
    name: Remote Server Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, mcp-compliance]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: |
          if ! pnpm install --frozen-lockfile --dry-run > /dev/null 2>&1; then
            pnpm install
          else
            pnpm install --frozen-lockfile
          fi

      - name: Test remote Cloudflare Workers deployment
        env:
          REMOTE_SERVER_URL: ${{ secrets.REMOTE_SERVER_URL }}
        run: |
          echo "Testing remote server deployment..."
          if [ -z "$REMOTE_SERVER_URL" ]; then
            REMOTE_SERVER_URL='https://courtlistener-mcp.blakeopowell.workers.dev/health'
          fi
          curl -f "$REMOTE_SERVER_URL" || echo "Remote server not accessible"
          MCP_ENDPOINT="${REMOTE_SERVER_URL%/health}/sse"
          SERVER_URL="$MCP_ENDPOINT" pnpm run test:mcp

      - name: Performance benchmark against remote
        env:
          REMOTE_SERVER_URL: ${{ secrets.REMOTE_SERVER_URL }}
        run: |
          echo "Running performance benchmarks..."
          if [ -z "$REMOTE_SERVER_URL" ]; then
            REMOTE_SERVER_URL='https://courtlistener-mcp.blakeopowell.workers.dev/health'
          fi
          MCP_ENDPOINT="${REMOTE_SERVER_URL%/health}/sse"
          SERVER_URL="$MCP_ENDPOINT" pnpm run test:performance

  security-check:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: |
          if ! pnpm install --frozen-lockfile --dry-run > /dev/null 2>&1; then
            pnpm install
          else
            pnpm install --frozen-lockfile
          fi

      - name: Run security audit
        run: pnpm audit --audit-level=moderate || echo "pnpm audit returned issues"

      - name: Check for sensitive data in logs
        run: |
          pnpm run build
          timeout 10s pnpm start 2>&1 | grep -i "api.key\|token\|secret\|password" && exit 1 || echo "No sensitive data found in logs"

      - name: Validate MCP server security
        run: |
          pnpm run build
          echo '{"invalid": "json"' | timeout 5s pnpm start || echo "Server handles malformed input gracefully"

  required-checks-gate:
    name: Required Checks Gate
    runs-on: ubuntu-latest
    needs: [test, mcp-compliance, security-check]
    if: always()
    steps:
      - name: Summarize upstream job results
        run: |
          echo "Test Suite result: ${{ needs.test.result }}"
          echo "MCP Compliance result: ${{ needs['mcp-compliance'].result }}"
          echo "Security & Code Quality result: ${{ needs['security-check'].result }}"
      - name: Fail if any required check failed
        if: ${{ needs.test.result != 'success' || needs['mcp-compliance'].result != 'success' || needs['security-check'].result != 'success' }}
        run: |
          echo "One or more required checks failed" >&2
          exit 1
      - name: All required checks passed
        if: ${{ needs.test.result == 'success' && needs['mcp-compliance'].result == 'success' && needs['security-check'].result == 'success' }}
        run: echo "All required checks passed"
