name: Performance Monitoring

on:
  push:
    branches: [ '*' ]  # Run on all branches to catch performance regressions
  pull_request:
    branches: [ '*' ]  # Run on PRs targeting any branch
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: false
        default: 'remote'
        type: choice
        options:
          - local
          - remote
          - both

permissions:
  contents: read
  issues: write

jobs:
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: |
        # Check if pnpm lock file is in sync, if not regenerate it
        if ! pnpm install --frozen-lockfile --dry-run > /dev/null 2>&1; then
          echo "‚ö†Ô∏è pnpm lock file out of sync, regenerating..."
          pnpm install
        else
          echo "‚úÖ pnpm lock file in sync, using frozen-lockfile"
          pnpm install --frozen-lockfile
        fi

    - name: Build project
      run: pnpm run build

    - name: Run performance tests
      env:
        REMOTE_SERVER_URL: ${{ secrets.REMOTE_SERVER_URL || 'https://courtlistener-mcp.blakeopowell.workers.dev/sse' }}
        TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'remote' }}
      run: |
        echo "‚ö° Running performance monitoring for $TEST_ENVIRONMENT environment(s)..."
        
        mkdir -p performance-data
        
        case "$TEST_ENVIRONMENT" in
          "local")
            echo "Testing local server performance..."
            pnpm run test:performance > performance-data/local-$(date +%Y%m%d-%H%M%S).txt
            ;;
          "remote")
            echo "Testing remote server performance..."
            SERVER_URL="$REMOTE_SERVER_URL" pnpm run test:performance > performance-data/remote-$(date +%Y%m%d-%H%M%S).txt
            ;;
          "both")
            echo "Testing both local and remote server performance..."
            pnpm run test:performance > performance-data/local-$(date +%Y%m%d-%H%M%S).txt
            SERVER_URL="$REMOTE_SERVER_URL" pnpm run test:performance > performance-data/remote-$(date +%Y%m%d-%H%M%S).txt
            ;;
        esac

    - name: Analyze performance trends
      run: |
        echo "üìä Analyzing performance trends..."
        
        # Create performance summary
        cat > performance-summary.md << EOF
        # Performance Monitoring Report
        
        **Date:** $(date)
        **Environment:** ${{ github.event.inputs.environment || 'remote' }}
        **Commit:** ${{ github.sha }}
        
        ## Latest Performance Results
        
        \`\`\`
        $(find performance-data -name "*.txt" -exec tail -10 {} \; | head -50)
        \`\`\`
        
        ## Performance Alerts
        
        $(node scripts/analyze-performance.js performance-data/ || echo "No performance issues detected ‚úÖ")
        
        EOF

    - name: Check for performance regressions
      run: |
        echo "üîç Checking for performance regressions..."
        
        # Download previous performance data if available
        if [ -n "${{ secrets.PERFORMANCE_BASELINE_URL }}" ]; then
          curl -s "${{ secrets.PERFORMANCE_BASELINE_URL }}" > baseline.txt || echo "No baseline available"
          
          if [ -f baseline.txt ] && [ -f performance-data/*.txt ]; then
            node scripts/compare-performance.js baseline.txt performance-data/*.txt || echo "Performance comparison completed"
          fi
        fi

    - name: Upload performance data
      uses: actions/upload-artifact@v4
      with:
        name: performance-monitoring-${{ github.run_number }}
        path: |
          performance-data/
          performance-summary.md
        retention-days: 30

    - name: Create issue for performance regression
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Performance Regression Detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          A performance regression has been detected during automated monitoring.
          
          **Environment:** ${{ github.event.inputs.environment || 'remote' }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.workflow }}
          **Run:** ${{ github.run_number }}
          
          Please review the performance data and investigate potential causes.
          
          [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['performance', 'regression', 'monitoring']
          });

  health-check:
    name: Remote Server Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule

    steps:
    - name: Check remote server health
      env:
        REMOTE_SERVER_URL: ${{ secrets.REMOTE_SERVER_URL || 'https://courtlistener-mcp.blakeopowell.workers.dev/sse' }}
      run: |
        echo "üè• Checking remote server health..."
        
        # Basic connectivity test
        if curl -f -s --max-time 10 "$REMOTE_SERVER_URL" > /dev/null; then
          echo "‚úÖ Remote server is responding"
        else
          echo "‚ùå Remote server is not responding"
          exit 1
        fi
        
        # Test basic MCP protocol
        echo "Testing basic MCP protocol compliance..."
        
        response=$(curl -s --max-time 30 -X POST \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{"tools":{}},"clientInfo":{"name":"Health Check","version":"1.0.0"}}}' \
          "$REMOTE_SERVER_URL")
        
        if echo "$response" | grep -q '"result"'; then
          echo "‚úÖ MCP protocol responding correctly"
        else
          echo "‚ùå MCP protocol not responding correctly"
          echo "Response: $response"
          exit 1
        fi

    - name: Create alert for server downtime
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Remote Server Health Check Failed - ${new Date().toISOString()}`;
          const body = `
          The remote Legal MCP server is not responding to health checks.
          
          **Server URL:** ${{ secrets.REMOTE_SERVER_URL || 'https://courtlistener-mcp.blakeopowell.workers.dev/sse' }}
          **Check Time:** ${new Date().toISOString()}
          **Workflow:** ${{ github.workflow }}
          
          Please investigate the server status and ensure it's functioning correctly.
          
          [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['critical', 'server-health', 'monitoring']
          });
